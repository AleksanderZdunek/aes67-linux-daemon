diff --git a/common/MergingRAVENNACommon.h b/common/MergingRAVENNACommon.h
index f26368d..a21f4a7 100644
--- a/common/MergingRAVENNACommon.h
+++ b/common/MergingRAVENNACommon.h
@@ -78,8 +78,8 @@
 #define DEFAULT_AUDIOMODE               MergingRAVENNACommon::AM_PCM
 #define DEFAULT_AUDIODATAFORMAT         MergingRAVENNACommon::ADF_PCM
 #define DEFAULT_ZONE                    MergingRAVENNACommon::Z_8_HP
-#define DEFAULT_NUMBEROFINPUTS          8
-#define DEFAULT_NUMBEROFOUTPUTS         8
+#define DEFAULT_NUMBEROFINPUTS          64
+#define DEFAULT_NUMBEROFOUTPUTS         64
 #define DEFAULT_FOLLOWDOPDETECTION      true
 
 #ifdef DSD256_at_705k6
diff --git a/driver/PTP.c b/driver/PTP.c
index 4b2242a..1bf593a 100644
--- a/driver/PTP.c
+++ b/driver/PTP.c
@@ -90,7 +90,7 @@ uint32_t get_FS(uint32_t ui32SamplingRate)
 			return 2;
 		default:
 			// TODO: should assert
-			MTAL_DP("Caudio_streamer_clock::get_FS error: unknown SamplingRate = %u\n", ui32SamplingRate);
+			//MTAL_DP("Caudio_streamer_clock::get_FS error: unknown SamplingRate = %u\n", ui32SamplingRate);
 		case 48000:
 		case 44100:
 			return 1;
@@ -110,7 +110,7 @@ uint32_t get_samplerate_base(uint32_t ui32SamplingRate)
 
 		default:
 			// TODO: should assert
-			MTAL_DP("Caudio_streamer_clock::get_samplerate_base error: unknown SamplingRate = %u\n", ui32SamplingRate);
+			//MTAL_DP("Caudio_streamer_clock::get_samplerate_base error: unknown SamplingRate = %u\n", ui32SamplingRate);
 		case 352800:
 		case 176400:
 		case 88200:
diff --git a/driver/module_netlink.c b/driver/module_netlink.c
index 48de263..dcdcce0 100644
--- a/driver/module_netlink.c
+++ b/driver/module_netlink.c
@@ -158,7 +158,7 @@ void recv_reply_from_user_land(struct sk_buff *skb)
 			// check if the given size if sufficient to copy the answered data
 			if (response_from_user_land->dataSize >= msg->dataSize)
 			{
-				if (response_from_user_land->data == NULL)
+				if (response_from_user_land->data != NULL)
 				{
 					memcpy(response_from_user_land->data, msg->data, msg->dataSize);
 				}
diff --git a/driver/MTAL_stdint.h b/driver/MTAL_stdint.h
index 3ccc109..2f11a58 100644
--- a/driver/MTAL_stdint.h
+++ b/driver/MTAL_stdint.h
@@ -64,9 +64,9 @@
         }
         #endif // __cplusplus
     #include <linux/types.h>
-    #define new NEW
+    //#define new NEW
     #include <linux/string.h>
-    #undef new
+    //#undef new
     #else
         #include <stdint.h>
     #endif
diff --git a/driver/RTP_stream_info.c b/driver/RTP_stream_info.c
index ac65bbb..a65994f 100644
--- a/driver/RTP_stream_info.c
+++ b/driver/RTP_stream_info.c
@@ -32,9 +32,9 @@
 #include "MTAL_TargetPlatform.h"
 
 #if (defined(MTAL_LINUX) && defined(MTAL_KERNEL))
-    #define new NEW
+    //#define new NEW
     #include <linux/string.h>
-    #undef new
+    //#undef new
 #else
     #include <string.h>
 #endif
diff --git a/driver/audio_driver.c b/driver/audio_driver.c
index 3d9debd..0ff2dfc 100644
--- a/driver/audio_driver.c
+++ b/driver/audio_driver.c
@@ -1292,8 +1292,7 @@ static int mr_alsa_audio_pcm_playback_copy_internal( struct snd_pcm_substream *s
     struct mr_alsa_audio_chip *chip = snd_pcm_substream_chip(substream);
     struct snd_pcm_runtime *runtime = substream->runtime;
     int chn = 0;
-    //int interleaved = ((channel == -1 && runtime->channels > 1)? 1 : 0);
-    int interleaved = runtime->access == SNDRV_PCM_ACCESS_RW_INTERLEAVED || SNDRV_PCM_ACCESS_MMAP_INTERLEAVED ? 1 : 0;
+    int interleaved = ((channel == -1 && runtime->channels > 1)? 1 : 0);
     unsigned int nb_logical_bits = snd_pcm_format_width(runtime->format);
     unsigned int strideIn = snd_pcm_format_physical_width(runtime->format) >> 3;
     unsigned int strideOut = snd_pcm_format_physical_width(SNDRV_PCM_FORMAT_S32_LE) >> 3;
@@ -1310,7 +1309,7 @@ static int mr_alsa_audio_pcm_playback_copy_internal( struct snd_pcm_substream *s
         memset(testblock, 0, sizeof(testblock));
     #endif
     
-    if (channel > 0 && channel >= runtime->channels)
+    if (!interleaved && channel >= runtime->channels)
     {
         printk(KERN_WARNING "Channel %d copy ignored because it does not fit the available runtime channels (%d)", channel, runtime->channels);
        return 0;
